// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  name String
}

model AcademicSemester {
  id String @id @default(uuid())
  year Int
  title String
  code String
  startMonth String
  endMonth String
  isCurrent Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
  semesterRegistrations SemesterRegistration[]
  studentEnrolledCourses StudentEnrolledCourse[]
  studentEnrolledCourseMarks  StudentEnrolledCourseMark[]
  studentSemesterPayments StudentSemesterPayment[]

  @@map("academic_semesters")
}

model AcademicFaculty {
    id String @id @default(uuid())
    title String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    academicDepartments AcademicDepartment []
    students Student[]
    faculties Faculty[]
    @@map("academic_faculy")
}

model AcademicDepartment {
   id String @id @default(uuid())
   title String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  studnets Student[]
  faculties Faculty[]
  offeredCourses OfferedCourses[]
  @@map("academic_department")
}

model Student {
  id String @id @default(uuid())
  studentId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo String
  gender String
  bloodGroup String
 
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String

  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentID], references: [id])
  academicDepartmentID String

  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentSemesterRegistrations StudentSemesterRegistration[]
  studentSemesterRegistrationCourse StudentSemesterRegistrationCourse[]
  studentEnrolledCourses StudentEnrolledCourse[]
  studentEnrolledCourseMarks  StudentEnrolledCourseMark[]
  studentSemesterPayments StudentSemesterPayment[]
  studentAcademicInfos StudentAcademicInfo[]

  @@map("students")

}

model Faculty {
  id String @id @default(uuid())
  facultyId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo String
  gender String
  designation String
  bloodGroup String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentID], references: [id])
  academicDepartmentID String

  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  courses CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faculties")

}

model Building {
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms Room[]
  @@map("buildings")
}

model Room {
  id String @id @default(uuid())
  roomNumber String
  floor String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  building Building @relation(fields: [buildingId], references: [id])
  buildingId String
  offeredCourseClassSchedules  OfferedCourseClassSchedule[]

  @@map("rooms")
  
}

model Course {
  id String @id @default(uuid())
  title String
  code String
  credits Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  preRequisite CourseToPrerequisite[] @relation("CourseToPrerequisite")
  prerequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  faculties CourseFaculty[]
  offeredCourse OfferedCourses[]
  studentEnrolledCourses StudentEnrolledCourse[]
  @@map("courses")
}

model CourseToPrerequisite {
  courseId String
  prerequisiteId String
  course  Course @relation(fields: [courseId], references: [id],name: "CourseToPrerequisite")
  preRequisite  Course @relation(fields: [prerequisiteId], references: [id], name: "PrerequisiteToCourse")
  @@id([courseId, prerequisiteId])
}

model CourseFaculty {
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  facultyId String
  faculty Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}


model SemesterRegistration {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  status SemesterRegistrationStatus? @default(UPCOMING)
  minCradit Int @default(0)
  maxCradit Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicSemisterId String
  academicSemister AcademicSemester @relation(fields: [academicSemisterId], references: [id])
  offeredCourse OfferedCourses[]
  offeredCourseSections OfferedCourseSection[]
  offeredCourseClassSchedules  OfferedCourseClassSchedule[]
  studentSemesterRegistrations StudentSemesterRegistration[]
  studentSemesterRegistrationCourse  StudentSemesterRegistrationCourse[]

  @@map("semester_Registrations")

}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

model OfferedCourses {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  academicDepartmentId String
 academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections OfferedCourseSection[]
  studentSemesterRegistrationCourse  StudentSemesterRegistrationCourse[]

  @@map("offered_courses")

}


model OfferedCourseSection {
  id String @id @default(uuid())
  title String
  maxcapacity Int
  currentEnrolledStudent Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  offeredCourseId String
  offerCourse OfferedCourses @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules  OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourse  StudentSemesterRegistrationCourse[]

  @@map("offered_course_sections")

}

model OfferedCourseClassSchedule {
  id String @id @default(uuid())
  startTime String
  endTime String
  dayOfWeek WeekDays @default(SATURDAY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  offeredCourseSectionId String
  offerCourseSection OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  roomId String
  room Room @relation(fields: [roomId], references: [id])
  facultyId String
  faculty Faculty @relation(fields: [facultyId], references: [id])
  @@map("offered_course_class_schedules")
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model StudentSemesterRegistration {
  id String @id @default(uuid())
  isConfirmed Boolean? @default(false)
  totalCreditsTaken Int? @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

@@map("student_semester_registrations")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  offeredCourseId String
  offeredCourse OfferedCourses @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([semesterRegistrationId, studentId, offeredCourseId])

  @@map("student_semester_registration_course")
}

model StudentEnrolledCourse {
  id String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  grade String?
  point Float ? @default(0)
  totalMarks Int @default(0)
  status StudentEnrolledCourseStatus @default(ONGOING)
  studentEnrolledCourseMarks  StudentEnrolledCourseMark[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_enrolled_Courses")
}

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

model StudentEnrolledCourseMark {
  id String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  studentEnrolledCourseId String
  studentEnrolledCourse StudentEnrolledCourse @relation(fields: [studentEnrolledCourseId], references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  grade String?
  marks Int?
  examType ExamType? @default(MIDTERM)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_enrolled_course_marks")
}

enum ExamType {
  MIDTERM
  FINAL
}

model StudentSemesterPayment {
  id String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  fullPaymentAmount Int? @default(0)
  partialPaymentAmount Int? @default(0)
  totalDueAmount Int? @default(0)
  totalpaidAmount Int? @default(0)
  paymentStatus PaymentStatus? @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_semester_payments")
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_FAID
}


model StudentAcademicInfo {
  id String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  totalCompletedCradits Int? @default(0)
  cgpa Float @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_academic_infos")

}