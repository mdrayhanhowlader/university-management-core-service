// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  name String
}

model AcademicSemester {
  id String @id @default(uuid())
  year Int
  title String
  code String
  startMonth String
  endMonth String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
    id String @id @default(uuid())
    title String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    academicDepartments AcademicDepartment []
    students Student[]
    faculties Faculty[]
    @@map("academic_faculy")
}

model AcademicDepartment {
   id String @id @default(uuid())
   title String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  studnets Student[]
  faculties Faculty[]
  @@map("academic_department")
}

model Student {
  id String @id @default(uuid())
  studentId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo String
  gender String
  bloodGroup String
 
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String

  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentID], references: [id])
  academicDepartmentID String

  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")

}

model Faculty {
  id String @id @default(uuid())
  facultyId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo String
  gender String
  designation String
  bloodGroup String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentID], references: [id])
  academicDepartmentID String

  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  courses CourseFaculty[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faculties")

}

model Building {
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms Room[]
  @@map("buildings")
}

model Room {
  id String @id @default(uuid())
  roomNumber String
  floor String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  building Building @relation(fields: [buildingId], references: [id])
  buildingId String

  @@map("rooms")
  
}

model Course {
  id String @id @default(uuid())
  title String
  code String
  credits Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  preRequisite CourseToPrerequisite[] @relation("CourseToPrerequisite")
  prerequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  faculties CourseFaculty[]
  @@map("courses")
}

model CourseToPrerequisite {
  courseId String
  prerequisiteId String
  course  Course @relation(fields: [courseId], references: [id],name: "CourseToPrerequisite")
  preRequisite  Course @relation(fields: [prerequisiteId], references: [id], name: "PrerequisiteToCourse")
  @@id([courseId, prerequisiteId])
}

model CourseFaculty {
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  facultyId String
  faculty Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}


model SemesterRegistration {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  status SemesterRegistrationStatus? @default(UPCOMING)
  minCradit Int @default(0)
  maxCradit Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicSemisterId String
  academicSemister AcademicSemester @relation(fields: [academicSemisterId], references: [id])

  @@map("semester_Registrations")

}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}